# Comprehensive Analysis of the Momentum Trading Strategy

After reviewing the codebase, here's a complete analysis of the trade flow including entry and exit conditions for both long and short positions.

## Overall Trading Loop Flow

The trading system operates through a continuous loop in `momentum_trading_loop()` which follows these steps:

1. **Check for position exits** for existing trades
2. **Scan for new entries** if below maximum position limit
3. **Monitor and update stop losses** for open positions
4. **Sleep** and repeat

## Entry Conditions

### Short Entry Conditions

For a symbol to qualify for a short position, it must meet ALL these criteria:

```python
if (has_price_gain and has_ema_crossunder and is_recent_crossunder 
    and is_supertrend_bearish and is_below_ema):
    # Generate short signal
```

Breaking this down:

1. **Significant Price Gain (`has_price_gain`)**: 
   - The coin must have gained at least 20% within the lookback period (default 24 hours)
   - This is detected by scanning for the maximum gain from any low to any subsequent high

2. **EMA Crossunder (`has_ema_crossunder`)**: 
   - Price must have crossed below the EMA(144) - which is a 12-hour EMA on 5-minute candles
   - The crossunder must come after a period where price was consistently above EMA

3. **Recent Crossunder (`is_recent_crossunder`)**: 
   - The crossunder must have occurred within the last 20 candles (approx. 100 minutes)

4. **Below EMA (`is_below_ema`)**: 
   - Current price must be below the EMA

5. **Bearish Supertrend (`is_supertrend_bearish`)**: 
   - The Supertrend indicator must be bearish (red/negative)

### Long Entry Conditions

For a symbol to qualify for a long position, it must meet ALL these criteria:

```python
if (has_price_decrease and has_ema_crossover and is_recent_crossover 
    and is_supertrend_bullish and is_above_ema):
    # Generate long signal
```

Breaking this down:

1. **Significant Price Decrease (`has_price_decrease`)**: 
   - The coin must have decreased at least 20% within the lookback period
   - Detected by scanning for the maximum drop from any high to any subsequent low

2. **EMA Crossover (`has_ema_crossover`)**: 
   - Price must have crossed above the EMA(144)
   - The crossover must come after a period where price was consistently below EMA

3. **Recent Crossover (`is_recent_crossover`)**: 
   - The crossover must have occurred within the last 6 candles (30 minutes)

4. **Above EMA (`is_above_ema`)**: 
   - Current price must be above the EMA

5. **Bullish Supertrend (`is_supertrend_bullish`)**: 
   - The Supertrend indicator must be bullish (green/positive)

## Entry Execution Process

When a valid entry signal is detected:

1. **Calculate stop loss**:
   - For shorts: `entry_price * (1 + sl_buffer_pct/100)` (2% above entry by default)
   - For longs: `entry_price * (1 - sl_buffer_pct/100)` (2% below entry by default)

2. **Set leverage and calculate quantity**:
   - Attempts to set leverage using options from `LEVERAGE_OPTIONS` (defaults to 10, 8)
   - Calculates order quantity based on `AMOUNT_USD` (default $1) and the set leverage

3. **Store position details** for tracking:
   ```python
   position_details[symbol] = {
       'entry_price': current_price,
       'stop_loss': stop_loss,
       'position_type': position_type,  # 'short' or 'long'
       'entry_reason': reason,
       'entry_time': time.time(),
       # other tracking metrics
   }
   ```

4. **Place market order**:
   - Using `place_order()` function with appropriate side ('buy' for long, 'sell' for short)

## Exit Conditions

### Short Position Exit Conditions

A short position will exit when EITHER:

1. **Price rises above exit threshold** (percentage from entry):
   ```python
   # Calculate percentage above entry
   price_change_pct = ((current_price - entry_price) / entry_price) * 100
   exit_threshold = entry_price * (1 + short_exit_pct/100)  # 2% above entry
   
   # Exit if price has moved up by the threshold percentage AND sustained
   if price_change_pct >= short_exit_pct and sustained_move:
       exit_signal['exit_triggered'] = True
       exit_signal['execute_reversal'] = True  # Signal potential reversal
   ```

2. **Price rises above stop loss**:
   ```python
   # Stop loss check (as backup)
   if stop_loss is not None and current_price >= stop_loss:
       sustained_above_sl = check_sustained_above_level(df, stop_loss)
       
       if sustained_above_sl:
           exit_signal['exit_triggered'] = True
           exit_signal['execute_reversal'] = False  # No reversal on stop loss hit
   ```

### Long Position Exit Conditions

A long position will exit when EITHER:

1. **Price falls below exit threshold** (percentage from entry):
   ```python
   # Calculate percentage below entry
   price_change_pct = ((entry_price - current_price) / entry_price) * 100
   exit_threshold = entry_price * (1 - long_exit_pct/100)  # 2% below entry
   
   # Exit if price has moved down by the threshold percentage AND sustained
   if price_change_pct >= long_exit_pct and sustained_move:
       exit_signal['exit_triggered'] = True
       exit_signal['execute_reversal'] = True  # Signal potential reversal
   ```

2. **Price falls below stop loss**:
   ```python
   # Stop loss check (as backup)
   if stop_loss is not None and current_price <= stop_loss:
       sustained_below_sl = check_sustained_below_level(df, stop_loss)
       
       if sustained_below_sl:
           exit_signal['exit_triggered'] = True
           exit_signal['execute_reversal'] = False  # No reversal on stop loss hit
   ```

## Sustained Price Movement Check

For both entries and exits, the system validates that price movements are "sustained" to avoid false signals:

```python
def check_sustained_above_level(df, level, num_candles=2):
    # Get just the most recent num_candles
    recent_candles = df.iloc[-num_candles:]
    
    # Check if ALL of these candles are above the level
    all_above = all(recent_candles['close'] > level)
    
    return all_above
```

This ensures that a price must maintain above/below a threshold for multiple candles (default 2) before triggering an exit.

## Position Reversal Logic

When exiting a position, the system may automatically reverse into the opposite direction:

```python
# If auto-reversals enabled and signaled by the exit logic
if execute_reversal and ENABLE_AUTO_REVERSALS:
    # Step 1: Exit the current position
    exit_order = place_order(...)
    
    # Step 2: Enter new position in the opposite direction
    entry_order = place_order(...)
    
    # Update position details with new direction
    position_details[symbol] = {
        'position_type': new_position_type,  # opposite of previous
        'entry_reason': f"Position Reversal (from {position_type})",
        # other details
    }
```

This only happens when:
1. The exit was triggered by a percentage-based move (not stop loss)
2. `ENABLE_AUTO_REVERSALS` is set to `True` (default is `False`)

## Additional Trading Constraints

The system has several safeguards:

1. **Minimum Hold Time**:
   - Positions must be held for at least `MINIMUM_HOLD_MINUTES` (default 2) before considering exits
   - Checked via `can_exit_position()` function

2. **Maximum Open Trades**:
   - System limits to `MAX_OPEN_TRADES` concurrent positions
   - If this limit is reached, no new entries are processed

3. **Stop Loss Monitoring**:
   - `update_momentum_stop_losses()` is called regularly to recalculate stop losses
   - For newly fixed code, stop losses are based on entry price rather than EMA

## Key Parameters That Control the Strategy

The main parameters that influence this strategy:

- `MOMENTUM_PARAMS`:
  - `lookback_days`: 1 (Check gains/drops over past 24 hours)
  - `min_price_gain`: 20.0 (Minimum % gain/drop required)
  - `ema_period`: 144 (12-hour EMA on 5-minute candles)
  - `sl_buffer_pct`: 2.0 (Stop loss buffer percentage)

- Other settings:
  - `MINIMUM_HOLD_MINUTES`: 2 (Minimum holding time)
  - `MAX_OPEN_TRADES`: Controls maximum position count
  - `LEVERAGE_OPTIONS`: [10, 8] (Leverage levels to try)
  - `ENABLE_AUTO_REVERSALS`: Default False (Whether to auto-reverse positions)

This strategy effectively looks for significant price moves that have started to reverse, confirmed by EMA crosses and Supertrend direction, and manages risk with fixed percentage-based stop losses.